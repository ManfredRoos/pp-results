
Biojs.Protein3DUniprot=Biojs.Protein3DWS.extend({constructor:function(options){this.base(options);var self=this;this.onPdbLoaded(function(e){Biojs.console.log(e.result+" loading the pdb file "+e.file);Biojs.console.log("self._aligmentsJustArrived= "+self._alignmentsJustArrived);if(self._alignmentsJustArrived){Biojs.console.log("Initialising the alignments selection list");self.reset();var alignments=self._filterAligmentsBySelection(self._selection);var pdbOptions=self._createOptions(alignments);if(jQuery('#'+self.opt.target).find('div#pdbStructures').length==0){self._addControl('<div id="pdbStructures"></div>');}
jQuery('#'+self.opt.target).find('div#pdbStructures').html('<h1>Structures for <b>'+self.opt.proteinId+'</b></h1><br/>'+'<select id="pdbFile_select">'+pdbOptions+'</select>');jQuery('#'+self.opt.target+' #pdbFile_select').val(pdb);jQuery('#'+self.opt.target+' #pdbFile_select').change(function(){self._onAlignmentSelectionChange();});jQuery('#'+self.opt.target).find('#pdbStructures').show();var alignmentId=pdb;var pdbId=alignmentId.substring(0,pdb.indexOf('.')).toLowerCase();var alignment=self.getAlignmentsByPdb(alignmentId);if(alignment.hasOwnProperty(alignmentId)){var start=alignment[alignmentId][1].start;var end=alignment[alignmentId][1].end;self.raiseEvent('onPdbSelected',{"pdbId":pdbId,"alignmentId":alignmentId,"start":start,"end":end});}
self._alignmentsJustArrived=false;}});if(this.opt.proteinId!=undefined){var proteinId=this.opt.proteinId;this.opt.proteinId='';this.setProtein(proteinId);}},opt:{proteinId:undefined,mapping:'http://www.ebi.ac.uk/pdbe-apps/widgets/unipdb?uniprot=',proxyUrl:'../biojs/dependencies/proxy/proxy.php'},eventTypes:["onPdbSelected"],_aligments:undefined,setProtein:function(proteinId){if(proteinId!=this.opt.proteinId){this.opt.proteinId=proteinId;this._selection=undefined;this._minStart=Number.MAX_VALUE;this._maxEnd=0;this._alignments=undefined;if(this.opt.mapping==Biojs.Protein3DUniprot.ALIGNMENTS_UNIPROT_MAPPING){this._requestAligmentsFromUniprot();}else if(this.opt.mapping==Biojs.Protein3DUniprot.ALIGNMENTS_PDBe_MAPPING){this._requestAligmentsFromPdbe();}else{throw"Error in mapping function. this.opt.mapping="+this.opt.mapping;}}},_requestAligmentsFromUniprot:function(){var self=this;jQuery.ajax({url:self.opt.mapping+self.opt.proteinId,data:{biojsmapping:'1',varname:'pdbmappings'},dataType:"script",crossDomain:true,success:function(){Biojs.console.log("SUCCESS: data received");self._alignments=pdbmappings;for(obj in pdbmappings){if(pdbmappings[obj][1].intObjectId!=self.opt.proteinId){self.opt.proteinId=pdbmappings[obj][1].intObjectId;}
break;}
self._aligmentsArrived();},async:false,error:function(qXHR,textStatus,errorThrown){Biojs.console.log("ERROR: requesting "+this.data);self.raiseEvent('onRequestError',{message:textStatus});}});},_requestAligmentsFromPdbe:function(){var self=this;jQuery.ajax({url:self.opt.proxyUrl,dataType:"text",data:{url:self.opt.mapping+self.opt.proteinId+'/'},success:function(data){Biojs.console.log("SUCCESS: data received");self._parseResponse(data);},async:false,error:function(qXHR,textStatus,errorThrown){Biojs.console.log("ERROR: requesting "+this.data);self.raiseEvent('onRequestError',{message:textStatus});}});},_parseResponse:function(text){this._alignments={};var i=0;var self=this;var data;Biojs.console.log("Decoding "+text);if(!Biojs.Utils.isEmpty(text)){try{data=jQuery.parseJSON(text);}catch(e){Biojs.console.log("Error decoding response: "+e.message);}
for(var i in data){try{var segments=[];segments.push({"start":data[i].pdb_range[0],"end":data[i].pdb_range[1],"intObjectId":data[i].pdbid+'.'+data[i].chain});segments.push({"start":data[i].uniprot_range[0],"end":data[i].uniprot_range[1],"intObjectId":data[i].uniprot_acc});self._alignments[segments[0].intObjectId]=segments;if(self._minStart>segment[1].start){self._minStart=segment[1].start;}
if(self._maxEnd<segment[1].end){self._maxEnd=segment[1].end;}}catch(e){Biojs.console.log("Error decoding alignment: "+e.message);}}}
Biojs.console.log("Alignments decoded:");Biojs.console.log(self._alignments);this._aligmentsArrived();},_aligmentsArrived:function(){this._alignmentsJustArrived=true;var alignments=this._filterAligmentsBySelection(this._selection);if(!Biojs.Utils.isEmpty(alignments)){var pdb=undefined;for(pdb in alignments){break;}
Biojs.console.log("Requesting pdb "+pdb);this.requestPdb(pdb.substring(0,pdb.indexOf('.')).toLowerCase());}else{this._container.html("No structural information for "+this.opt.proteinId);this.raiseEvent('onRequestError',{message:"No structural information available for "+this.opt.proteinId});}},_onAlignmentSelectionChange:function(){var pdb=jQuery('#pdbFile_select').val();if(pdb!=undefined){var alignmentId=pdb.substring(0,pdb.indexOf(' '));var pdbId=alignmentId.substring(0,pdb.indexOf('.')).toLowerCase();var alignment=this.getAlignmentsByPdb(alignmentId);if(alignment.hasOwnProperty(alignmentId)){var start=alignment[alignmentId][1].start;var end=alignment[alignmentId][1].end;this.raiseEvent('onPdbSelected',{"pdbId":pdbId,"alignmentId":alignmentId,"start":start,"end":end});}
this.requestPdb(pdbId);}else{Biojs.console.log("No structural information available for "+this.opt.proteinId);}},requestPdb:function(pdbId){var self=this;self.showLoadingImage();self.opt.id=pdbId;jQuery.ajax({url:self.opt.proxyUrl,data:'url='+self.opt.pdbUrl+'/'+pdbId+'.pdb',dataType:'text',success:function(pdbContent){Biojs.console.log("DATA ARRIVED");if(self._uniprotSelection!=undefined){self._selection=self._translateSelection(self._uniprotSelection);}
self.setPdb(pdbContent);},error:function(qXHR,textStatus,errorThrown){self.raiseEvent('onRequestError',{message:textStatus});}});},getAlignmentsBySelection:function(selection){var alignments=this._alignments;if(selection!=undefined){this._filterAligmentsBySelection(selection);}
return alignments;},getAlignmentsByPdb:function(pdbId){var alignments={};for(al in this._alignments){if(this._alignments[al][0].intObjectId.indexOf(pdbId)!=-1){alignments[this._alignments[al][0].intObjectId]=this._alignments[al];}}
Biojs.console.log("Alignments for pdb "+pdbId);Biojs.console.log(alignments);return alignments;},filterAlignments:function(selection){var alignments=this._filterAligmentsBySelection(selection);var selectedAlignment=jQuery('#pdbFile_select').val();jQuery('#pdbFile_select').html(this._createOptions(alignments));if(alignments.hasOwnProperty(selectedAlignment.slice(0,selectedAlignment.indexOf(' ')))){jQuery('#pdbFile_select').val(selectedAlignment);}else{for(a in alignments){jQuery('#pdbFile_select').val(a);break;}
this._onAlignmentSelectionChange();}
this.base(selection);},_createOptions:function(alignments){var pdbOptions="";for(pdb in alignments){text=pdb+" ("+alignments[pdb][1].start+".."+alignments[pdb][1].end+")";pdbOptions+='<option value="'+text+'">'+text+'</option>';}
Biojs.console.log("_createOptions: "+pdbOptions);return pdbOptions;},_filterAligmentsBySelection:function(selection){var alignments=undefined;if(selection instanceof Array){alignments={};for(al in this._alignments){var uniprot=this._alignments[al][1];for(i in selection){if(selection[i]>=uniprot.start&&selection[i]<=uniprot.end){alignments[this._alignments[al][0].intObjectId]=this._alignments[al];break;}}}}else if(selection instanceof Object){alignments={};var i=0;for(al in this._alignments){var uniprot=this._alignments[al][1];if((selection.start>=uniprot.start&&selection.start<=uniprot.end)||(selection.end>=uniprot.start&&selection.end<=uniprot.end)||(selection.start<uniprot.start&&selection.end>uniprot.end)){alignments[this._alignments[al][0].intObjectId]=this._alignments[al];i++;}}}else{alignments=this._alignments;}
Biojs.console.log("Filtered alignments:");Biojs.console.log(alignments);return alignments;},setSelection:function(s){this._uniprotSelection=Biojs.Utils.clone(s);var selection=this._translateSelection(s);this.base(selection);},_translateSelection:function(s){var selection=Biojs.Utils.clone(s);var alignmentId=this.getCurrentAlignmentId();var proteinId=this.getCurrentProteinId();var segment=this.getAlignmentsByPdb(alignmentId)[alignmentId];var offset=0;for(i in segment){if(segment[i].intObjectId==alignmentId){pdbSegment=segment[i];}else if(segment[i].intObjectId==proteinId){uniprotSegment=segment[i];}}
offset=uniprotSegment.start-pdbSegment.start;if(selection instanceof Array){var toDelete=new Array(selection.length);for(i in selection){if(selection[i]instanceof Object){if((selection[i].start>uniprotSegment.end)||(selection[i].end<uniprotSegment.start)){selection[i].start=0;selection[i].end=0;toDelete[i]=true;}else if((selection[i].start>=uniprotSegment.start)&&(selection[i].end<=uniprotSegment.end)){selection.start-=offset;selection.end-=offset;toDelete[i]=false;}else if((selection[i].start<uniprotSegment.start)&&(selection[i].end<=uniprotSegment.end)){selection[i].start=pdbSegment.start-0;selection[i].end-=offset;toDelete[i]=false;}else if((selection[i].start>=uniprotSegment.start)&&(selection[i].end>uniprotSegment.end)){selection[i].start-=offset;selection[i].end=pdbSegment.end-0;toDelete[i]=false;}else if((selection[i].start<uniprotSegment.start)&&(selection[i].end>uniprotSegment.end)){selection[i].start=pdbSegment.start-0
selection[i].end=pdbSegment.end-0;toDelete[i]=false;}}else{if((uniprotSegment.start<=selection[i])&&(selection[i]<=uniprotSegment.end)){selection[i]-=offset;toDelete[i]=false;}else{toDelete[i]=true;}}}
var deleted=0;for(j in toDelete){if(toDelete[j]==true){selection.splice(j-deleted,j-deleted);deleted+=1;}}}else if(selection instanceof Object&&selection.start<=selection.end){if((selection.start>uniprotSegment.end)||(selection.end<uniprotSegment.start)){selection.start=0;selection.end=0;this.removeSelection();}else if((selection.start>=uniprotSegment.start)&&(selection.end<=uniprotSegment.end)){selection.start-=offset;selection.end-=offset;}else if((selection.start<uniprotSegment.start)&&(selection.end<=uniprotSegment.end)){selection.start=pdbSegment.start-0;selection.end-=offset;}else if((selection.start>=uniprotSegment.start)&&(selection.end>uniprotSegment.end)){selection.start-=offset;selection.end=pdbSegment.end-0;}else if((selection.start<uniprotSegment.start)&&(selection.end>uniprotSegment.end)){selection.start=pdbSegment.start-0
selection.end=pdbSegment.end-0;}}
return(selection);},getCurrentAlignmentId:function(){var selectedValue=jQuery('#pdbFile_select').val();var alignmentId=selectedValue.substring(0,selectedValue.indexOf(' '));return alignmentId;},getCurrentProteinId:function(){return this.opt.proteinId;},removeSelection:function(){this.base();}},{ALIGNMENTS_UNIPROT_MAPPING:'http://www.ebi.ac.uk/pdbe-apps/widgets/unipdb?uniprot=',ALIGNMENTS_PDBe_MAPPING:'http://wwwdev.ebi.ac.uk/pdbe-apps/jsonizer/mappings/best/all/'});